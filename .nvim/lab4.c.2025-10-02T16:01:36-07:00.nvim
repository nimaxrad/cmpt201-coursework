#define _DEFAULT_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#define BLOCK_SIZE 128
#define HEAP_SIZE 256
#define BUFF_SIZE 64

struct header {

  uint64_t size;
  struct header *next;
};

void handle_error(const char *msg) {

  perror(msg);
  exit(EXIT_FAILURE);
}

void print_out(char *format, void *data, size_t data_size) {

  char buf[BUFF_SIZE];
  ssize_t len = snprintf(buf, BUFF_SIZE, format,
                         data_size == sizeof(uint64_t) ? *(uint64_t *)data
                                                       : *(void **)data);
  if (len < 0) {
    handle_error("sprintf");
  }
  write(STDOUT_FILENO, buf, len);
}

void print_block(char *start) {

  for (int i = 0; i < BLOCK_SIZE - sizeof(struct header); ++i) {
    char *addr = start + sizeof(struct header) + i;
    uint64_t val = (uint64_t)*addr;
    print_out("%lu", &val, sizeof(val));
  }
}

void initialize_block(struct header *block, uint64_t size, struct header *next,
                      int fill_value) {

  block->size = size;
  block->next = next;
  memset(block + 1, fill_value, size - sizeof(struct header));
}

int main(void) {

  printf("lab4\n");
  // void *size_current_break;
  char *heap_start = sbrk(0);
  if (sbrk(HEAP_SIZE) == (void *)-1) {

    handle_error("sbrk");
  }
  struct header *first_block = (struct header *)heap_start;
  struct header *second_block = (struct header *)(heap_start + BLOCK_SIZE);
  initialize_block(first_block, BLOCK_SIZE, NULL, 0);
  initialize_block(second_block, BLOCK_SIZE, first_block, 1);
  print_out("first block:       %p\n", &first_block, sizeof(first_block));
  print_out("second block:      %p\n", &second_block, sizeof(second_block));
  print_out("first block size:  %lu\n", &first_block->size, sizeof(first_block->size));

  return 0;
}
